// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package storedb

import (
	"context"
	"database/sql"
)

const addTask = `-- name: AddTask :exec
INSERT INTO tasks (description, completed, addedFrom) VALUES (?, ?, ?)
`

type AddTaskParams struct {
	Description sql.NullString
	Completed   sql.NullBool
	Addedfrom   sql.NullString
}

func (q *Queries) AddTask(ctx context.Context, arg AddTaskParams) error {
	_, err := q.db.ExecContext(ctx, addTask, arg.Description, arg.Completed, arg.Addedfrom)
	return err
}

const checked = `-- name: Checked :exec
UPDATE tasks SET completed = NOT completed WHERE id = ?
`

func (q *Queries) Checked(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, checked, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const filterCompletedTasks = `-- name: FilterCompletedTasks :many
SELECT id, description, completed, addedFrom FROM tasks WHERE completed = TRUE
`

func (q *Queries) FilterCompletedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, filterCompletedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Completed,
			&i.Addedfrom,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterIncompleteTasks = `-- name: FilterIncompleteTasks :many
SELECT id, description, completed, addedFrom FROM tasks WHERE completed = FALSE
`

func (q *Queries) FilterIncompleteTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, filterIncompleteTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Completed,
			&i.Addedfrom,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasks = `-- name: GetTasks :many
SELECT id, description, completed, addedFrom FROM tasks
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Completed,
			&i.Addedfrom,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
